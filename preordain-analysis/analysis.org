#+BEGIN_SRC ipython :session
  import sys
  import json
  import requests
  import pandas as pd
  import numpy as np
  import os.path
  import seaborn as sns
  %matplotlib inline
  import matplotlib.pyplot as plt
  import pprint
  sys.path.append('/Users/peixianwang/Code/devourer/devourer')
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session
  import devourer
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session
  USERNAME = "ancient-molten-giant-2943"
  API_KEY = "-X_VZRijrHoV4qMZxfXq"
  URL = "https://trackobot.com/profile/history.json?"

  HS_JSON = "https://api.hearthstonejson.com/v1/latest/enUS/"
  HS_JSON_EXT = ["cardbacks.json", "cards.collectible.json", "cards.json"]
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session 
  nom = devourer.devourer()
  nom.pull_data(USERNAME, API_KEY, force_update = False)
  data = nom.parse_data()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :results output
  decks = nom.generate_decks()
  print(decks.head())
#+END_SRC

#+RESULTS:
#+begin_example
                      added  \
0  2016-07-18T16:12:50.000Z   
1  2016-07-18T16:06:27.000Z   
2  2016-07-18T15:59:15.000Z   
3  2016-07-18T15:48:31.000Z   
4  2016-07-18T15:42:09.000Z   

                                        card_history   coin  duration    hero  \
0  [{'card': {'name': 'Tunnel Trogg', 'id': 'LOE_...   True       363   Druid   
1  [{'card': {'name': 'Shapeshift', 'id': 'CS2_01...  False       252   Druid   
2  [{'card': {'name': 'Northshire Cleric', 'id': ...   True       623  Priest   
3  [{'card': {'name': 'Museum Curator', 'id': 'LO...  False       356  Priest   
4  [{'card': {'name': 'Twilight Whelp', 'id': 'BR...   True       438  Priest   

  hero_deck        id  legend    mode  note opponent opponent_deck  rank  \
0     Token  35210043     NaN  casual  None   Shaman         Aggro   NaN   
1     Token  35209510     NaN  casual  None   Shaman         Other   NaN   
2    Dragon  35208841     NaN  casual  None   Shaman         Other   NaN   
3    Dragon  35207886     NaN  casual  None    Druid         Token   NaN   
4    Dragon  35207316     NaN  casual  None    Druid         Token   NaN   

  result    p_deck_type   o_deck_type  
0    win    Token_Druid  Aggro_Shaman  
1   loss    Token_Druid  Other_Shaman  
2    win  Dragon_Priest  Other_Shaman  
3    win  Dragon_Priest   Token_Druid  
4   loss  Dragon_Priest   Token_Druid  
#+end_example

#+BEGIN_SRC ipython :session :results output
  ranked_decks = decks[decks["mode"] == "ranked"]
  print(ranked_decks.head())
#+END_SRC

#+RESULTS:
#+begin_example
                       added  \
9   2016-07-10T23:46:27.000Z   
10  2016-07-10T15:44:12.000Z   
11  2016-07-08T17:32:13.000Z   
12  2016-07-08T17:00:18.000Z   
13  2016-07-08T16:53:08.000Z   

                                         card_history   coin  duration  \
9   [{'card': {'name': 'The Coin', 'id': 'GAME_005...   True       284   
10  [{'card': {'name': 'Tunnel Trogg', 'id': 'LOE_...  False       342   
11  [{'card': {'name': 'The Coin', 'id': 'GAME_005...   True       661   
12  [{'card': {'name': 'Fiery War Axe', 'id': 'CS2...  False       415   
13  [{'card': {'name': 'Mana Wyrm', 'id': 'NEW1_01...   True       638   

       hero hero_deck        id  legend    mode  note opponent opponent_deck  \
9   Warrior    Dragon  34654135     NaN  ranked  None    Rogue         Other   
10  Warrior    Dragon  34610410     NaN  ranked  None   Shaman         Aggro   
11  Warrior    Dragon  34400263     NaN  ranked  None  Warlock          Reno   
12  Warrior    Dragon  34396935     NaN  ranked  None    Druid        C'Thun   
13  Warrior    Dragon  34396168     NaN  ranked  None     Mage         Tempo   

    rank result     p_deck_type   o_deck_type  
9   13.0    win  Dragon_Warrior   Other_Rogue  
10  13.0    win  Dragon_Warrior  Aggro_Shaman  
11  13.0   loss  Dragon_Warrior  Reno_Warlock  
12  14.0    win  Dragon_Warrior  C'Thun_Druid  
13  14.0    win  Dragon_Warrior    Tempo_Mage  
#+end_example

#+BEGIN_SRC ipython :session :results output
  ranked_decks["win"] = ranked_decks["result"].map(lambda x: True if x == "win" else False)
  ranked_decks["count"] = [1]*len(ranked_decks)
  encounter_rates = ranked_decks.groupby(["p_deck_type", "o_deck_type"]).agg({"coin": np.sum, "duration": [np.mean, np.std], "count": np.sum, "win": np.sum})
  print(encounter_rates)
#+END_SRC

#+RESULTS:
#+begin_example
                                    duration             count coin  win
                                        mean         std   sum  sum  sum
p_deck_type     o_deck_type                                             
C'Thun_Warrior  Aggro_Paladin     526.000000         NaN     1  1.0  0.0
                Aggro_Shaman      210.000000         NaN     1  1.0  0.0
                C'Thun_Warrior    975.000000  158.391919     2  1.0  2.0
                Dragon_Warrior    577.000000         NaN     1  0.0  1.0
                Midrange_Hunter   497.333333  103.510064     3  3.0  2.0
                Midrange_Shaman   600.000000         NaN     1  0.0  1.0
                N'Zoth_Rogue      592.000000         NaN     1  0.0  0.0
                Other_Shaman      710.000000         NaN     1  1.0  1.0
                Tempo_Mage        657.666667   90.754247     3  1.0  2.0
                Tempo_Warrior     279.000000         NaN     1  1.0  0.0
                Token_Druid       472.000000         NaN     1  0.0  0.0
                Zoo_Warlock       550.000000         NaN     1  1.0  1.0
Control_Priest  Miracle_Rogue     330.000000         NaN     1  1.0  0.0
Control_Warrior Aggro_Shaman      435.250000   79.742816     4  2.0  2.0
                C'Thun_Druid      674.500000  499.924494     2  0.0  2.0
                C'Thun_Warrior   1049.666667  101.928079     3  2.0  1.0
                Dragon_Priest     781.000000         NaN     1  0.0  1.0
                Dragon_Warrior    523.750000  159.414293     4  3.0  4.0
                Freeze_Mage       391.000000   82.024387     2  1.0  2.0
                Malygos_Rogue     581.000000         NaN     1  0.0  0.0
                Midrange_Hunter   380.400000   99.336226    15  9.0  3.0
                Midrange_Shaman   472.166667  180.366756     6  2.0  3.0
                N'Zoth_Paladin   1030.250000   63.918568     4  1.0  1.0
                N'Zoth_Rogue      751.500000  200.111219     2  0.0  2.0
                Other_Druid       288.000000         NaN     1  1.0  1.0
                Other_Hunter      887.000000         NaN     1  0.0  1.0
                Other_Paladin     764.000000         NaN     1  0.0  0.0
                Other_Shaman      911.000000  211.461580     3  3.0  2.0
                Other_Warrior     825.500000  419.314321     2  1.0  1.0
                Pirate_Warrior    379.500000   34.648232     2  2.0  1.0
...                                      ...         ...   ...  ...  ...
Other_Warrior   Aggro_Shaman      425.000000   86.122006     3  1.0  1.0
                C'Thun_Druid      426.500000  101.116270     2  1.0  1.0
                C'Thun_Warrior    987.000000         NaN     1  0.0  0.0
                Control_Warrior  1233.000000         NaN     1  0.0  1.0
                Dragon_Warrior    467.000000         NaN     1  1.0  0.0
                N'Zoth_Paladin   1014.000000         NaN     1  0.0  0.0
                Other_Hunter      164.000000  110.013636     3  2.0  2.0
                Other_Mage        562.500000  378.302128     2  1.0  2.0
                Other_Paladin     524.000000         NaN     1  0.0  0.0
                Other_Rogue       401.000000         NaN     1  1.0  0.0
                Other_Shaman      445.500000   92.630988     2  0.0  1.0
                Other_Warlock     510.000000  129.641814     3  2.0  1.0
                Other_Warrior     621.000000         NaN     1  1.0  0.0
                Ramp_Druid        623.000000         NaN     1  1.0  1.0
                Tempo_Mage        859.000000   14.142136     2  1.0  2.0
                Token_Druid       583.000000         NaN     1  1.0  0.0
                Zoo_Warlock       356.000000         NaN     1  1.0  1.0
Tempo_Warrior   Other_Rogue       501.000000         NaN     1  0.0  1.0
                Pirate_Warrior    439.000000         NaN     1  0.0  0.0
Token_Druid     Aggro_Shaman      383.000000         NaN     1  0.0  1.0
                Other_Druid       246.500000   31.680699     4  3.0  2.0
                Other_Hunter      308.750000   68.470797     4  4.0  2.0
                Other_Mage        653.400000  214.701653     5  3.0  2.0
                Other_Paladin     561.000000         NaN     1  0.0  0.0
                Other_Priest      501.000000  135.764502     2  0.0  1.0
                Other_Rogue       653.750000  114.263949     4  2.0  3.0
                Other_Shaman      484.800000  210.332356     5  2.0  2.0
                Other_Warlock     515.500000  284.495167     6  5.0  3.0
                Other_Warrior     526.600000  291.043468     5  1.0  2.0
Zoo_Warlock     Midrange_Hunter   470.000000         NaN     1  1.0  1.0

[95 rows x 5 columns]
#+end_example

#+BEGIN_SRC ipython :session :results output
  encounter_rates["win%"] = encounter_rates["win"]["sum"]/encounter_rates["count"]["sum"]
  filtered_encounter_rates = encounter_rates[encounter_rates['count']['sum'] > 1]
  #print(filtered_encounter_rates)
  encounter_rates_reset = filtered_encounter_rates.reset_index()
  #print(encounter_rates_reset)
  matchups = encounter_rates_reset.pivot('o_deck_type', 'p_deck_type', 'win%')
  #print(matchups.head())
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :file tmp/image.png :exports both
  cmap = sns.cubehelix_palette(as_cmap=True, rot=-.3, light=1)
  sns.heatmap(matchups, cmap=cmap)
  sns.plt.show()
#+END_SRC

#+RESULTS:
[[file:tmp/image.png]]
