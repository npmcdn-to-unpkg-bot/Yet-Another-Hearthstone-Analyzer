#+BEGIN_SRC ipython :session
  import itertools
  import matplotlib.pyplot as plt
  import numpy as np
  import pymc3 as pm
  import scipy
  import scipy.stats as stats
  import seaborn as sns
  %matplotlib inline
#+END_SRC

#+BEGIN_SRC ipython :session :results output
  import yaha_analyzer
  nom = yaha_analyzer.yaha_analyzer()
  nom._load_collectobot_data()
  print(nom.games.head())
  print(len(nom.games['hero_deck']))
#+END_SRC

#+RESULTS:
#+begin_example
                   added                                       card_history  \
10  2016-06-28T17:57:45Z  [{'player': 'opponent', 'card': {'name': 'Tunn...   
11  2016-06-28T17:44:53Z  [{'player': 'me', 'card': {'name': 'The Coin',...   
12  2016-06-28T17:36:41Z  [{'player': 'me', 'card': {'name': 'N'Zoth's F...   
13  2016-06-28T17:28:55Z  [{'player': 'me', 'card': {'name': 'N'Zoth's F...   
14  2016-06-28T17:20:01Z  [{'player': 'opponent', 'card': {'name': 'Fier...   

     coin  duration     hero hero_deck        id  legend    mode  note  \
10   True     761.0  Warrior    Dragon  33262529     NaN  ranked  None   
11   True     349.0  Warrior    Dragon  33261034     NaN  ranked  None   
12  False     419.0  Warrior    Dragon  33260101     NaN  ranked  None   
13  False     265.0  Warrior    Dragon  33259253     NaN  ranked  None   
14  False     290.0  Warrior    Dragon  33258263     NaN  ranked  None   

   opponent opponent_deck  rank  region result  \
10   Shaman      Midrange   6.0  Europe   loss   
11   Hunter      Midrange   6.0  Europe   loss   
12    Druid        C'Thun   6.0  Europe   loss   
13  Warlock           Zoo   6.0  Europe    win   
14   Hunter      Midrange   6.0  Europe    win   

                           user_hash     p_deck_type      o_deck_type  \
10  853B97737D848AE2F22D60931C888CB3  Dragon_Warrior  Midrange_Shaman   
11  853B97737D848AE2F22D60931C888CB3  Dragon_Warrior  Midrange_Hunter   
12  853B97737D848AE2F22D60931C888CB3  Dragon_Warrior     C'Thun_Druid   
13  853B97737D848AE2F22D60931C888CB3  Dragon_Warrior      Zoo_Warlock   
14  853B97737D848AE2F22D60931C888CB3  Dragon_Warrior  Midrange_Hunter   

                                       p_cards_played  \
10  [The Coin, Fiery War Axe, Blood To Ichor, Fier...   
11  [The Coin, Alexstrasza's Champion, Fiery War A...   
12  [N'Zoth's First Mate, Slam, Blood To Ichor, Tw...   
13  [N'Zoth's First Mate, Blood To Ichor, Fiery Wa...   
14  [Fiery War Axe, Blood To Ichor, Alexstrasza's ...   

                                       o_cards_played  
10  [Tunnel Trogg, Feral Spirit, Flametongue Totem...  
11  [King's Elekk, Eaglehorn Bow, Infested Wolf, S...  
12  [Innervate, Twilight Elder, Beckoner of Evil, ...  
13  [Argent Squire, The Coin, Darkshire Councilman...  
14  [Fiery Bat, The Coin, Animal Companion, Eagleh...  
13522
#+end_example

#+BEGIN_SRC ipython :session :results output
  cards = nom.generate_card_stats(card_threshold=2)
  print(cards)
#+END_SRC

#+RESULTS:
#+begin_example
                                                           loss  win
card                   p_deck_type   o_deck_type     turn           
Abusive Sergeant       Aggro_Paladin C'Thun_Druid    8        0    3
                                     C'Thun_Warrior  4        2    1
                                     Dragon_Warrior  3        3    3
                                                     5        1    3
                                                     7        3    0
                                                     9        0    3
                                     Midrange_Hunter 2        2    1
                                                     5        2    1
                                                     6        3    3
                                     Midrange_Shaman 2        1    2
                                     Token_Druid     6        2    2
                                                     7        4    0
                                                     9        1    3
                                     Zoo_Warlock     3        2    1
                                                     4        1    2
                                                     7        3    0
                       Aggro_Shaman  Aggro_Shaman    2        2    6
                                                     3        4    6
                                                     4       10    1
                                                     5        2    3
                                                     6        2    2
                                                     7        2    5
                                                     8        0    3
                                     C'Thun_Druid    2        0    3
                                                     4        0    3
                                                     5        3    0
                                                     6        2    3
                                                     7        1    6
                                     C'Thun_Warrior  1        3    0
                                                     2        3    2
...                                                         ...  ...
Yogg-Saron, Hope's End Tempo_Mage    Zoo_Warlock     10       3    3
                       Token_Druid   C'Thun_Druid    9        2    1
                                     C'Thun_Warrior  10       3    0
                                                     12       3    1
                                                     13       5    2
                                                     14       2    1
                                     Dragon_Warrior  7        3    3
                                                     8        2    2
                                                     9        3    3
                                                     10       6    2
                                                     11       2    1
                                                     12       2    1
                                     Midrange_Hunter 9        2    2
                                                     10       4    0
                                     Other_Warrior   10       2    1
                                     Reno_Warlock    16       0    3
                                     Token_Druid     8        2    2
                                                     9        1    4
                                                     10       2    3
                                                     11       4    1
                                     Zoo_Warlock     8        1    2
Ysera                  Other_Priest  Other_Mage      9        1    2
                                     Other_Paladin   9        1    2
                                                     10       1    2
                                     Other_Warrior   14       3    0
                       Other_Warrior Other_Warrior   10       1    3
                                                     11       3    0
                                                     14       1    2
Zombie Chow            Other_Priest  Other_Mage      1        2    1
                                     Other_Warlock   19       0    3

[31122 rows x 2 columns]
#+end_example

#+BEGIN_SRC ipython :session :results output
  #card_stats = cards.reset_index()
  #stats = card_stats[card_stats['card'] == 'Fiery War Axe']
  #print(stats)
  print(cards.loc['Fiery War Axe', 'Dragon_Warrior'])
#+END_SRC

#+RESULTS:
#+begin_example
                     loss  win
o_deck_type    turn           
Aggro_Paladin  2        5    2
               4        2    1
               5        1    2
               7        2    2
Aggro_Shaman   1        4    5
               2       10    9
               3        6   11
               4        2    7
               5        5    1
               6        6    7
               7        3    6
               8        7    2
               9        2    1
               10       2    3
C'Thun_Druid   2        8    6
               3        2    3
               5        4    3
               6        3    2
               7        2    4
               8        2    3
C'Thun_Priest  2        0    3
C'Thun_Warrior 2       16    9
               3        3    7
               4        2    8
               5        4    4
               6        5    5
               7        8    6
               8        4    2
               9        3    5
               10       2    2
...                   ...  ...
Tempo_Mage     9        1    5
               10       3    2
               11       1    2
               12       2    2
               13       2    2
Tempo_Warrior  2        1    2
               3        1    3
               4        2    2
               7        1    2
Token_Druid    2        8    9
               3        7    8
               4        4    6
               5        5    4
               6        2   10
               7        6    7
               8        2    4
               9        2    1
               10       2    3
               11       0    4
               12       2    2
               13       0    3
Zoo_Warlock    1        3    9
               2       15   16
               3       10   10
               4        7    7
               5        4    8
               6        4    8
               7        9    4
               8        6    6
               9        1    4

[161 rows x 2 columns]
#+end_example

#+BEGIN_SRC ipython :session :file /tmp/image.png :exports both
  dist = []
  for r in zip(stats['turn'], stats['win']):
      dist.extend([r[0]]*r[1])
  sns.distplot(dist)
  sns.plt.show()
#+END_SRC

#+RESULTS:
[[file:/tmp/image.png]]

#+BEGIN_SRC ipython :session :file /tmp/images.png :exports both
  g = sns.JointGrid(x='turn', y='win', data=cards.loc['Fiery War Axe', 'Dragon_Warrior'].reset_index())
  g = g.plot(sns.regplot, sns.distplot)
#+END_SRC

#+RESULTS:
[[file:/tmp/images.png]]
