#+BEGIN_SRC ipython :session
  import sys
  import json
  import requests
  import pandas as pd
  import numpy as np
  import os.path
  import seaborn as sns
  %matplotlib inline
  import matplotlib.pyplot as plt
  import pprint
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session
  import yaha_analyzer
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session
  USERNAME = "ancient-molten-giant-2943"
  API_KEY = "-X_VZRijrHoV4qMZxfXq"
  URL = "https://trackobot.com/profile/history.json?"

  HS_JSON = "https://api.hearthstonejson.com/v1/latest/enUS/"
  HS_JSON_EXT = ["cardbacks.json", "cards.collectible.json", "cards.json"]
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session 
  nom = yaha_analyzer.yaha_analyzer()
  nom.pull_data(USERNAME, API_KEY, force_update = False)
  data = nom.parse_data()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :results output
  decks = nom.generate_decks()
  print(decks.head())
#+END_SRC

#+RESULTS:
#+begin_example
                      added  \
0  2016-07-18T16:12:50.000Z   
1  2016-07-18T16:06:27.000Z   
2  2016-07-18T15:59:15.000Z   
3  2016-07-18T15:48:31.000Z   
4  2016-07-18T15:42:09.000Z   

                                        card_history   coin  duration    hero  \
0  [{'turn': 1, 'card': {'name': 'Tunnel Trogg', ...   True       363   Druid   
1  [{'turn': 2, 'card': {'name': 'Shapeshift', 'i...  False       252   Druid   
2  [{'turn': 1, 'card': {'name': 'Northshire Cler...   True       623  Priest   
3  [{'turn': 2, 'card': {'name': 'Museum Curator'...  False       356  Priest   
4  [{'turn': 1, 'card': {'name': 'Twilight Whelp'...   True       438  Priest   

  hero_deck        id  legend    mode  note opponent opponent_deck  rank  \
0     Token  35210043     NaN  casual  None   Shaman         Aggro   NaN   
1     Token  35209510     NaN  casual  None   Shaman         Other   NaN   
2    Dragon  35208841     NaN  casual  None   Shaman         Other   NaN   
3    Dragon  35207886     NaN  casual  None    Druid         Token   NaN   
4    Dragon  35207316     NaN  casual  None    Druid         Token   NaN   

  result    p_deck_type   o_deck_type  
0    win    Token_Druid  Aggro_Shaman  
1   loss    Token_Druid  Other_Shaman  
2    win  Dragon_Priest  Other_Shaman  
3    win  Dragon_Priest   Token_Druid  
4   loss  Dragon_Priest   Token_Druid  
#+end_example

#+BEGIN_SRC ipython :session :results output
  ranked_decks = decks[decks["mode"] == "ranked"]
  print(ranked_decks.head())
#+END_SRC

#+RESULTS:
#+begin_example
                       added  \
9   2016-07-10T23:46:27.000Z   
10  2016-07-10T15:44:12.000Z   
11  2016-07-08T17:32:13.000Z   
12  2016-07-08T17:00:18.000Z   
13  2016-07-08T16:53:08.000Z   

                                         card_history   coin  duration  \
9   [{'turn': 1, 'card': {'name': 'The Coin', 'id'...   True       284   
10  [{'turn': 1, 'card': {'name': 'Tunnel Trogg', ...  False       342   
11  [{'turn': 1, 'card': {'name': 'The Coin', 'id'...   True       661   
12  [{'turn': 2, 'card': {'name': 'Fiery War Axe',...  False       415   
13  [{'turn': 1, 'card': {'name': 'Mana Wyrm', 'id...   True       638   

       hero hero_deck        id  legend    mode  note opponent opponent_deck  \
9   Warrior    Dragon  34654135     NaN  ranked  None    Rogue         Other   
10  Warrior    Dragon  34610410     NaN  ranked  None   Shaman         Aggro   
11  Warrior    Dragon  34400263     NaN  ranked  None  Warlock          Reno   
12  Warrior    Dragon  34396935     NaN  ranked  None    Druid        C'Thun   
13  Warrior    Dragon  34396168     NaN  ranked  None     Mage         Tempo   

    rank result     p_deck_type   o_deck_type  
9   13.0    win  Dragon_Warrior   Other_Rogue  
10  13.0    win  Dragon_Warrior  Aggro_Shaman  
11  13.0   loss  Dragon_Warrior  Reno_Warlock  
12  14.0    win  Dragon_Warrior  C'Thun_Druid  
13  14.0    win  Dragon_Warrior    Tempo_Mage  
#+end_example

#+BEGIN_SRC ipython :session :results output
  ranked_decks["win"] = ranked_decks["result"].map(lambda x: True if x == "win" else False)
  ranked_decks["count"] = [1]*len(ranked_decks)
  encounter_rates = ranked_decks.groupby(["p_deck_type", "o_deck_type"]).agg({"coin": np.sum, "duration": [np.mean, np.std], "count": np.sum, "win": np.sum})
  print(encounter_rates)
#+END_SRC

#+RESULTS:
#+begin_example
                                    duration             count coin  win
                                        mean         std   sum  sum  sum
p_deck_type     o_deck_type                                             
C'Thun_Warrior  Aggro_Paladin     526.000000         NaN     1  1.0  0.0
                Aggro_Shaman      210.000000         NaN     1  1.0  0.0
                C'Thun_Warrior    975.000000  158.391919     2  1.0  2.0
                Dragon_Warrior    577.000000         NaN     1  0.0  1.0
                Midrange_Hunter   497.333333  103.510064     3  3.0  2.0
                Midrange_Shaman   600.000000         NaN     1  0.0  1.0
                N'Zoth_Rogue      592.000000         NaN     1  0.0  0.0
                Other_Shaman      710.000000         NaN     1  1.0  1.0
                Tempo_Mage        657.666667   90.754247     3  1.0  2.0
                Tempo_Warrior     279.000000         NaN     1  1.0  0.0
                Token_Druid       472.000000         NaN     1  0.0  0.0
                Zoo_Warlock       550.000000         NaN     1  1.0  1.0
Control_Priest  Miracle_Rogue     330.000000         NaN     1  1.0  0.0
Control_Warrior Aggro_Shaman      435.250000   79.742816     4  2.0  2.0
                C'Thun_Druid      674.500000  499.924494     2  0.0  2.0
                C'Thun_Warrior   1049.666667  101.928079     3  2.0  1.0
                Dragon_Priest     781.000000         NaN     1  0.0  1.0
                Dragon_Warrior    523.750000  159.414293     4  3.0  4.0
                Freeze_Mage       391.000000   82.024387     2  1.0  2.0
                Malygos_Rogue     581.000000         NaN     1  0.0  0.0
                Midrange_Hunter   380.400000   99.336226    15  9.0  3.0
                Midrange_Shaman   472.166667  180.366756     6  2.0  3.0
                N'Zoth_Paladin   1030.250000   63.918568     4  1.0  1.0
                N'Zoth_Rogue      751.500000  200.111219     2  0.0  2.0
                Other_Druid       288.000000         NaN     1  1.0  1.0
                Other_Hunter      887.000000         NaN     1  0.0  1.0
                Other_Paladin     764.000000         NaN     1  0.0  0.0
                Other_Shaman      911.000000  211.461580     3  3.0  2.0
                Other_Warrior     825.500000  419.314321     2  1.0  1.0
                Pirate_Warrior    379.500000   34.648232     2  2.0  1.0
...                                      ...         ...   ...  ...  ...
Other_Warrior   Aggro_Shaman      425.000000   86.122006     3  1.0  1.0
                C'Thun_Druid      426.500000  101.116270     2  1.0  1.0
                C'Thun_Warrior    987.000000         NaN     1  0.0  0.0
                Control_Warrior  1233.000000         NaN     1  0.0  1.0
                Dragon_Warrior    467.000000         NaN     1  1.0  0.0
                N'Zoth_Paladin   1014.000000         NaN     1  0.0  0.0
                Other_Hunter      164.000000  110.013636     3  2.0  2.0
                Other_Mage        562.500000  378.302128     2  1.0  2.0
                Other_Paladin     524.000000         NaN     1  0.0  0.0
                Other_Rogue       401.000000         NaN     1  1.0  0.0
                Other_Shaman      445.500000   92.630988     2  0.0  1.0
                Other_Warlock     510.000000  129.641814     3  2.0  1.0
                Other_Warrior     621.000000         NaN     1  1.0  0.0
                Ramp_Druid        623.000000         NaN     1  1.0  1.0
                Tempo_Mage        859.000000   14.142136     2  1.0  2.0
                Token_Druid       583.000000         NaN     1  1.0  0.0
                Zoo_Warlock       356.000000         NaN     1  1.0  1.0
Tempo_Warrior   Other_Rogue       501.000000         NaN     1  0.0  1.0
                Pirate_Warrior    439.000000         NaN     1  0.0  0.0
Token_Druid     Aggro_Shaman      383.000000         NaN     1  0.0  1.0
                Other_Druid       246.500000   31.680699     4  3.0  2.0
                Other_Hunter      308.750000   68.470797     4  4.0  2.0
                Other_Mage        653.400000  214.701653     5  3.0  2.0
                Other_Paladin     561.000000         NaN     1  0.0  0.0
                Other_Priest      501.000000  135.764502     2  0.0  1.0
                Other_Rogue       653.750000  114.263949     4  2.0  3.0
                Other_Shaman      484.800000  210.332356     5  2.0  2.0
                Other_Warlock     515.500000  284.495167     6  5.0  3.0
                Other_Warrior     526.600000  291.043468     5  1.0  2.0
Zoo_Warlock     Midrange_Hunter   470.000000         NaN     1  1.0  1.0

[95 rows x 5 columns]
#+end_example

#+BEGIN_SRC ipython :session :results output
  encounter_rates["win%"] = encounter_rates["win"]["sum"]/encounter_rates["count"]["sum"]
  filtered_encounter_rates = encounter_rates[encounter_rates['count']['sum'] > 1]
  #print(filtered_encounter_rates)
  encounter_rates_reset = filtered_encounter_rates.reset_index()
  #print(encounter_rates_reset)
  matchups = encounter_rates_reset.pivot('o_deck_type', 'p_deck_type', 'win%')
  #print(matchups.head())
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :file tmp/image.png :exports both
  cmap = sns.cubehelix_palette(as_cmap=True, rot=-.3, light=1)
  sns.heatmap(matchups, cmap=cmap)
  sns.plt.show()
#+END_SRC

#+RESULTS:
[[file:tmp/image.png]]

#+BEGIN_SRC ipython :session
  import yaha_analyzer
  nom = yaha_analyzer.yaha_analyzer()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :results output
  nom.grab_data(USERNAME, API_KEY)
  nom.generate_decks()
  matchups = nom.generate_matchups(game_mode = 'both', game_threshold=1)
#+END_SRC

#+RESULTS:


#+BEGIN_SRC ipython :session :results output
  def get_card_list(dict_list, player='me'):
      p_card_list = list(filter(None, map(lambda x: x['card'] if x['player'] == player else None, dict_list)))
      return p_card_list

  decks = nom.games
  print(decks['card_history'][0][0])
  #p_card_list, o_card_list = decks['card_history'].map(lambda x: get_card_list(x))
  #decks['p_cards_played'], decks['o_cards_played'] = p_card_list, o_card_list
  decks['p_cards_played'] = decks['card_history'].map(lambda x: get_card_list(x, player='me'))
  decks['o_cards_played'] = decks['card_history'].map(lambda x: get_card_list(x, player='opponent'))
  print(decks.head())
#+END_SRC

#+RESULTS:
#+begin_example
{'turn': 1, 'player': 'opponent', 'card': 'Tunnel Trogg'}
                      added  \
0  2016-07-18T16:12:50.000Z   
1  2016-07-18T16:06:27.000Z   
2  2016-07-18T15:59:15.000Z   
3  2016-07-18T15:48:31.000Z   
4  2016-07-18T15:42:09.000Z   

                                        card_history   coin  duration    hero  \
0  [{'turn': 1, 'player': 'opponent', 'card': 'Tu...   True       363   Druid   
1  [{'turn': 2, 'player': 'me', 'card': 'Shapeshi...  False       252   Druid   
2  [{'turn': 1, 'player': 'me', 'card': 'Northshi...   True       623  Priest   
3  [{'turn': 2, 'player': 'me', 'card': 'Museum C...  False       356  Priest   
4  [{'turn': 1, 'player': 'me', 'card': 'Twilight...   True       438  Priest   

  hero_deck        id  legend    mode  note opponent opponent_deck  rank  \
0     Token  35210043     NaN  casual  None   Shaman         Aggro   NaN   
1     Token  35209510     NaN  casual  None   Shaman         Other   NaN   
2    Dragon  35208841     NaN  casual  None   Shaman         Other   NaN   
3    Dragon  35207886     NaN  casual  None    Druid         Token   NaN   
4    Dragon  35207316     NaN  casual  None    Druid         Token   NaN   

  result    p_deck_type   o_deck_type    win  count  \
0    win    Token_Druid  Aggro_Shaman   True      1   
1   loss    Token_Druid  Other_Shaman  False      1   
2    win  Dragon_Priest  Other_Shaman   True      1   
3    win  Dragon_Priest   Token_Druid   True      1   
4   loss  Dragon_Priest   Token_Druid  False      1   

                                      p_cards_played  \
0  [The Coin, Wild Growth, Innervate, Druid of th...   
1  [Shapeshift, Shapeshift, Fandral Staghelm, Inn...   
2  [Northshire Cleric, Museum Curator, The Coin, ...   
3  [Museum Curator, Blackwing Technician, Shiftin...   
4  [Twilight Whelp, The Coin, Northshire Cleric, ...   

                                      o_cards_played  
0  [Tunnel Trogg, Ancestral Knowledge, Argent Squ...  
1  [Totemic Call, The Coin, Flamewreathed Faceles...  
2  [Totem Golem, Rockbiter Weapon, Flamewreathed ...  
3  [Wild Growth, The Coin, Nourish, Shapeshift, F...  
4  [Wrath, Shapeshift, Violet Teacher, Druid of t...  
#+end_example


#+BEGIN_SRC ipython :session :results output

  print(matchups.head())
#+END_SRC

#+RESULTS:
#+begin_example
                                   duration             count  \
                                       mean         std   sum   
p_deck_type     o_deck_type                                     
C'Thun_Warrior  C'Thun_Warrior   975.000000  158.391919     2   
                Midrange_Hunter  497.333333  103.510064     3   
                Tempo_Mage       657.666667   90.754247     3   
                Zoo_Warlock      495.000000   77.781746     2   
Control_Warrior Aggro_Shaman     435.250000   79.742816     4   

                                                                      card_history  \
                                                                          <lambda>   
p_deck_type     o_deck_type                                                          
C'Thun_Warrior  C'Thun_Warrior   ([{'turn': 3, 'player': 'opponent', 'card': 'S...   
                Midrange_Hunter  ([{'turn': 2, 'player': 'opponent', 'card': 'H...   
                Tempo_Mage       ([{'turn': 1, 'player': 'opponent', 'card': 'M...   
                Zoo_Warlock      ([{'turn': 1, 'player': 'opponent', 'card': 'T...   
Control_Warrior Aggro_Shaman     ([{'turn': 1, 'player': 'opponent', 'card': 'S...   

                                coin  win      win%  
                                 sum  sum            
p_deck_type     o_deck_type                          
C'Thun_Warrior  C'Thun_Warrior   1.0  2.0  1.000000  
                Midrange_Hunter  3.0  2.0  0.666667  
                Tempo_Mage       1.0  2.0  0.666667  
                Zoo_Warlock      1.0  2.0  1.000000  
Control_Warrior Aggro_Shaman     2.0  2.0  0.500000  
#+end_example

#+BEGIN_SRC ipython :session :results output
  matchups = nom.generate_matchups(game_mode='ranked', game_threshold=1)
  print(matchups.head())
#+END_SRC

#+RESULTS:
#+begin_example
                                count coin    duration              win  \
                                  sum  sum        mean         std  sum   
p_deck_type     o_deck_type                                               
C'Thun_Warrior  C'Thun_Warrior      2  1.0  975.000000  158.391919  2.0   
                Midrange_Hunter     3  3.0  497.333333  103.510064  2.0   
                Tempo_Mage          3  1.0  657.666667   90.754247  2.0   
Control_Warrior Aggro_Shaman        4  2.0  435.250000   79.742816  2.0   
                C'Thun_Druid        2  0.0  674.500000  499.924494  2.0   

                                     win%  
                                           
p_deck_type     o_deck_type                
C'Thun_Warrior  C'Thun_Warrior   1.000000  
                Midrange_Hunter  0.666667  
                Tempo_Mage       0.666667  
Control_Warrior Aggro_Shaman     0.500000  
                C'Thun_Druid     1.000000  
#+end_example


#+BEGIN_SRC ipython :session :results output
  games = nom.games
  #games = games.groupby()
  grouped = games.groupby(["p_deck_type", "o_deck_type"])
  #grouped = grouped.apply(lambda x: list(x.card_history))
  grouped = grouped.agg({"coin": np.sum, "duration": [np.mean, np.std], "count": np.sum, "win": np.sum, "card_history": lambda x: tuple(x)})
  #grouped = games.groupby(['p_deck_type', 'o_deck_type']).agg({"card_history": lambda x: list(x.card_history)})
  #grouped = grouped.apply(lambda x: list(x.card_history))
  print(len(grouped['card_history']['<lambda>'][2]))
  print(grouped.head())
  print(grouped['card_history']['<lambda>'][2])
  ch = grouped['card_history']['<lambda>'][2]
#+END_SRC

#+RESULTS:
#+begin_example
2
                               count coin    duration              \
                                 sum  sum        mean         std   
p_deck_type    o_deck_type                                          
C'Thun_Warrior Aggro_Paladin       1  1.0  526.000000         NaN   
               Aggro_Shaman        1  1.0  210.000000         NaN   
               C'Thun_Warrior      2  1.0  975.000000  158.391919   
               Dragon_Warrior      1  0.0  577.000000         NaN   
               Midrange_Hunter     3  3.0  497.333333  103.510064   

                                                                     card_history  \
                                                                         <lambda>   
p_deck_type    o_deck_type                                                          
C'Thun_Warrior Aggro_Paladin    ([{'card': {'name': 'Competitive Spirit', 'man...   
               Aggro_Shaman     ([{'card': {'name': 'Sir Finley Mrrgglton', 'm...   
               C'Thun_Warrior   ([{'card': {'name': 'Shield Block', 'mana': 3,...   
               Dragon_Warrior   ([{'card': {'name': 'Sir Finley Mrrgglton', 'm...   
               Midrange_Hunter  ([{'card': {'name': 'Huge Toad', 'mana': 2, 'i...   

                                win  
                                sum  
p_deck_type    o_deck_type           
C'Thun_Warrior Aggro_Paladin    0.0  
               Aggro_Shaman     0.0  
               C'Thun_Warrior   2.0  
               Dragon_Warrior   1.0  
               Midrange_Hunter  2.0  
([{'card': {'name': 'Shield Block', 'mana': 3, 'id': 'EX1_606'}, 'turn': 3, 'player': 'opponent'}, {'card': {'name': 'Shield Block', 'mana': 3, 'id': 'EX1_606'}, 'turn': 3, 'player': 'me'}, {'card': {'name': "C'Thun's Chosen", 'mana': 4, 'id': 'OG_283'}, 'turn': 4, 'player': 'opponent'}, {'card': {'name': "C'Thun's Chosen", 'mana': 4, 'id': 'OG_283'}, 'turn': 4, 'player': 'me'}, {'card': {'name': 'Slam', 'mana': 2, 'id': 'EX1_391'}, 'turn': 5, 'player': 'opponent'}, {'card': {'name': 'Acolyte of Pain', 'mana': 3, 'id': 'EX1_007'}, 'turn': 5, 'player': 'me'}, {'card': {'name': 'Beckoner of Evil', 'mana': 2, 'id': 'OG_281'}, 'turn': 5, 'player': 'me'}, {'card': {'name': 'Fiery War Axe', 'mana': 2, 'id': 'CS2_106'}, 'turn': 6, 'player': 'opponent'}, {'card': {'name': 'Ravaging Ghoul', 'mana': 3, 'id': 'OG_149'}, 'turn': 6, 'player': 'me'}, {'card': {'name': 'Elise Starseeker', 'mana': 4, 'id': 'LOE_079'}, 'turn': 7, 'player': 'opponent'}, {'card': {'name': 'Elise Starseeker', 'mana': 4, 'id': 'LOE_079'}, 'turn': 7, 'player': 'me'}, {'card': {'name': 'Shield Slam', 'mana': 1, 'id': 'EX1_410'}, 'turn': 7, 'player': 'me'}, {'card': {'name': 'Gorehowl', 'mana': 7, 'id': 'EX1_411'}, 'turn': 8, 'player': 'opponent'}, {'card': {'name': 'Justicar Trueheart', 'mana': 6, 'id': 'AT_132'}, 'turn': 8, 'player': 'me'}, {'card': {'name': 'Ravaging Ghoul', 'mana': 3, 'id': 'OG_149'}, 'turn': 9, 'player': 'opponent'}, {'card': {'name': "Disciple of C'Thun", 'mana': 3, 'id': 'OG_162'}, 'turn': 9, 'player': 'opponent'}, {'card': {'name': 'Slam', 'mana': 2, 'id': 'EX1_391'}, 'turn': 9, 'player': 'me'}, {'card': {'name': 'Ravaging Ghoul', 'mana': 3, 'id': 'OG_149'}, 'turn': 9, 'player': 'me'}, {'card': {'name': 'Acolyte of Pain', 'mana': 3, 'id': 'EX1_007'}, 'turn': 10, 'player': 'opponent'}, {'card': {'name': 'Sylvanas Windrunner', 'mana': 6, 'id': 'EX1_016'}, 'turn': 10, 'player': 'opponent'}, {'card': {'name': 'Gorehowl', 'mana': 7, 'id': 'EX1_411'}, 'turn': 10, 'player': 'me'}, {'card': {'name': 'Harrison Jones', 'mana': 5, 'id': 'EX1_558'}, 'turn': 11, 'player': 'opponent'}, {'card': {'name': 'Fiery War Axe', 'mana': 2, 'id': 'CS2_106'}, 'turn': 11, 'player': 'me'}, {'card': {'name': "Disciple of C'Thun", 'mana': 3, 'id': 'OG_162'}, 'turn': 11, 'player': 'me'}, {'card': {'name': 'Execute', 'mana': 1, 'id': 'CS2_108'}, 'turn': 11, 'player': 'me'}, {'card': {'name': "C'Thun", 'mana': 10, 'id': 'OG_280'}, 'turn': 12, 'player': 'opponent'}, {'card': {'name': 'Emperor Thaurissan', 'mana': 6, 'id': 'BRM_028'}, 'turn': 12, 'player': 'me'}, {'card': {'name': "Disciple of C'Thun", 'mana': 3, 'id': 'OG_162'}, 'turn': 13, 'player': 'opponent'}, {'card': {'name': 'Brann Bronzebeard', 'mana': 3, 'id': 'LOE_077'}, 'turn': 13, 'player': 'me'}, {'card': {'name': 'The Coin', 'mana': None, 'id': 'GAME_005'}, 'turn': 13, 'player': 'me'}, {'card': {'name': "C'Thun", 'mana': 10, 'id': 'OG_280'}, 'turn': 13, 'player': 'me'}, {'card': {'name': 'Ravaging Ghoul', 'mana': 3, 'id': 'OG_149'}, 'turn': 14, 'player': 'opponent'}, {'card': {'name': 'Execute', 'mana': 1, 'id': 'CS2_108'}, 'turn': 14, 'player': 'opponent'}, {'card': {'name': "C'Thun's Chosen", 'mana': 4, 'id': 'OG_283'}, 'turn': 14, 'player': 'opponent'}, {'card': {'name': 'Ancient Shieldbearer', 'mana': 7, 'id': 'OG_301'}, 'turn': 14, 'player': 'me'}, {'card': {'name': 'Fiery War Axe', 'mana': 2, 'id': 'CS2_106'}, 'turn': 14, 'player': 'me'}, {'card': {'name': 'Map to the Golden Monkey', 'mana': 2, 'id': 'LOE_019t'}, 'turn': 15, 'player': 'opponent'}, {'card': {'name': 'Ancient Shieldbearer', 'mana': 7, 'id': 'OG_301'}, 'turn': 15, 'player': 'opponent'}, {'card': {'name': 'Ancient Shieldbearer', 'mana': 7, 'id': 'OG_301'}, 'turn': 15, 'player': 'me'}, {'card': {'name': 'Revenge', 'mana': 2, 'id': 'BRM_015'}, 'turn': 16, 'player': 'opponent'}, {'card': {'name': 'Execute', 'mana': 1, 'id': 'CS2_108'}, 'turn': 16, 'player': 'opponent'}, {'card': {'name': 'Doomcaller', 'mana': 8, 'id': 'OG_255'}, 'turn': 16, 'player': 'me'}, {'card': {'name': 'Shield Block', 'mana': 3, 'id': 'EX1_606'}, 'turn': 17, 'player': 'opponent'}, {'card': {'name': 'Shield Slam', 'mana': 1, 'id': 'EX1_410'}, 'turn': 17, 'player': 'opponent'}, {'card': {'name': "C'Thun's Chosen", 'mana': 4, 'id': 'OG_283'}, 'turn': 17, 'player': 'me'}, {'card': {'name': 'Fiery War Axe', 'mana': 2, 'id': 'CS2_106'}, 'turn': 18, 'player': 'opponent'}, {'card': {'name': 'Shield Slam', 'mana': 1, 'id': 'EX1_410'}, 'turn': 18, 'player': 'me'}, {'card': {'name': 'Beckoner of Evil', 'mana': 2, 'id': 'OG_281'}, 'turn': 19, 'player': 'opponent'}, {'card': {'name': 'Map to the Golden Monkey', 'mana': 2, 'id': 'LOE_019t'}, 'turn': 19, 'player': 'me'}, {'card': {'name': 'Golden Monkey', 'mana': 4, 'id': 'LOE_019t2'}, 'turn': 20, 'player': 'opponent'}, {'card': {'name': "C'Thun", 'mana': 10, 'id': 'OG_280'}, 'turn': 20, 'player': 'me'}, {'card': {'name': 'Malkorok', 'mana': 7, 'id': 'OG_220'}, 'turn': 21, 'player': 'opponent'}, {'card': {'name': 'Shield Block', 'mana': 3, 'id': 'EX1_606'}, 'turn': 21, 'player': 'me'}, {'card': {'name': "Disciple of C'Thun", 'mana': 3, 'id': 'OG_162'}, 'turn': 21, 'player': 'me'}, {'card': {'name': 'Execute', 'mana': 1, 'id': 'CS2_108'}, 'turn': 21, 'player': 'me'}, {'card': {'name': 'Gruul', 'mana': 8, 'id': 'NEW1_038'}, 'turn': 22, 'player': 'opponent'}], [{'card': {'name': "C'Thun's Chosen", 'mana': 4, 'id': 'OG_283'}, 'turn': 4, 'player': 'me'}, {'card': {'name': 'The Coin', 'mana': None, 'id': 'GAME_005'}, 'turn': 4, 'player': 'opponent'}, {'card': {'name': 'Crazed Worshipper', 'mana': 5, 'id': 'OG_321'}, 'turn': 4, 'player': 'opponent'}, {'card': {'name': 'Shield Slam', 'mana': 1, 'id': 'EX1_410'}, 'turn': 5, 'player': 'me'}, {'card': {'name': 'Fiery War Axe', 'mana': 2, 'id': 'CS2_106'}, 'turn': 5, 'player': 'me'}, {'card': {'name': "Disciple of C'Thun", 'mana': 3, 'id': 'OG_162'}, 'turn': 5, 'player': 'opponent'}, {'card': {'name': 'Emperor Thaurissan', 'mana': 6, 'id': 'BRM_028'}, 'turn': 6, 'player': 'me'}, {'card': {'name': 'Sylvanas Windrunner', 'mana': 6, 'id': 'EX1_016'}, 'turn': 6, 'player': 'opponent'}, {'card': {'name': 'Acolyte of Pain', 'mana': 3, 'id': 'EX1_007'}, 'turn': 7, 'player': 'me'}, {'card': {'name': 'Ravaging Ghoul', 'mana': 3, 'id': 'OG_149'}, 'turn': 7, 'player': 'me'}, {'card': {'name': 'Execute', 'mana': 1, 'id': 'CS2_108'}, 'turn': 7, 'player': 'me'}, {'card': {'name': 'Execute', 'mana': 1, 'id': 'CS2_108'}, 'turn': 7, 'player': 'opponent'}, {'card': {'name': 'Bash', 'mana': 3, 'id': 'AT_064'}, 'turn': 7, 'player': 'opponent'}, {'card': {'name': 'Acolyte of Pain', 'mana': 3, 'id': 'EX1_007'}, 'turn': 7, 'player': 'opponent'}, {'card': {'name': 'Justicar Trueheart', 'mana': 6, 'id': 'AT_132'}, 'turn': 8, 'player': 'me'}, {'card': {'name': 'Elise Starseeker', 'mana': 4, 'id': 'LOE_079'}, 'turn': 8, 'player': 'me'}, {'card': {'name': 'Shield Block', 'mana': 3, 'id': 'EX1_606'}, 'turn': 8, 'player': 'opponent'}, {'card': {'name': 'Shield Slam', 'mana': 1, 'id': 'EX1_410'}, 'turn': 8, 'player': 'opponent'}, {'card': {'name': 'Gorehowl', 'mana': 7, 'id': 'EX1_411'}, 'turn': 9, 'player': 'opponent'}, {'card': {'name': 'Doomcaller', 'mana': 8, 'id': 'OG_255'}, 'turn': 10, 'player': 'me'}, {'card': {'name': 'Justicar Trueheart', 'mana': 6, 'id': 'AT_132'}, 'turn': 10, 'player': 'opponent'}, {'card': {'name': 'Shield Slam', 'mana': 1, 'id': 'EX1_410'}, 'turn': 10, 'player': 'opponent'}, {'card': {'name': 'Ancient Shieldbearer', 'mana': 7, 'id': 'OG_301'}, 'turn': 11, 'player': 'me'}, {'card': {'name': "Disciple of C'Thun", 'mana': 3, 'id': 'OG_162'}, 'turn': 11, 'player': 'opponent'}, {'card': {'name': 'Ancient Shieldbearer', 'mana': 7, 'id': 'OG_301'}, 'turn': 11, 'player': 'opponent'}, {'card': {'name': 'Shield Block', 'mana': 3, 'id': 'EX1_606'}, 'turn': 12, 'player': 'me'}, {'card': {'name': 'Brawl', 'mana': 5, 'id': 'EX1_407'}, 'turn': 12, 'player': 'me'}, {'card': {'name': 'Ravaging Ghoul', 'mana': 3, 'id': 'OG_149'}, 'turn': 12, 'player': 'me'}, {'card': {'name': "Twin Emperor Vek'lor", 'mana': 7, 'id': 'OG_131'}, 'turn': 12, 'player': 'opponent'}, {'card': {'name': "Disciple of C'Thun", 'mana': 3, 'id': 'OG_162'}, 'turn': 13, 'player': 'me'}, {'card': {'name': 'Brawl', 'mana': 5, 'id': 'EX1_407'}, 'turn': 13, 'player': 'me'}, {'card': {'name': "C'Thun's Chosen", 'mana': 4, 'id': 'OG_283'}, 'turn': 13, 'player': 'opponent'}, {'card': {'name': 'Gorehowl', 'mana': 7, 'id': 'EX1_411'}, 'turn': 14, 'player': 'me'}, {'card': {'name': 'Ancient Shieldbearer', 'mana': 7, 'id': 'OG_301'}, 'turn': 14, 'player': 'opponent'}, {'card': {'name': 'Ancient Shieldbearer', 'mana': 7, 'id': 'OG_301'}, 'turn': 15, 'player': 'me'}, {'card': {'name': 'Bash', 'mana': 3, 'id': 'AT_064'}, 'turn': 15, 'player': 'opponent'}, {'card': {'name': "C'Thun's Chosen", 'mana': 4, 'id': 'OG_283'}, 'turn': 17, 'player': 'me'}, {'card': {'name': 'Beckoner of Evil', 'mana': 2, 'id': 'OG_281'}, 'turn': 17, 'player': 'me'}, {'card': {'name': 'Ravaging Ghoul', 'mana': 3, 'id': 'OG_149'}, 'turn': 17, 'player': 'opponent'}, {'card': {'name': 'Shield Block', 'mana': 3, 'id': 'EX1_606'}, 'turn': 17, 'player': 'opponent'}, {'card': {'name': 'Map to the Golden Monkey', 'mana': 2, 'id': 'LOE_019t'}, 'turn': 18, 'player': 'me'}, {'card': {'name': "C'Thun's Chosen", 'mana': 4, 'id': 'OG_283'}, 'turn': 18, 'player': 'opponent'}, {'card': {'name': "Twin Emperor Vek'lor", 'mana': 7, 'id': 'OG_131'}, 'turn': 19, 'player': 'me'}, {'card': {'name': 'Acolyte of Pain', 'mana': 3, 'id': 'EX1_007'}, 'turn': 19, 'player': 'opponent'}, {'card': {'name': 'Ravaging Ghoul', 'mana': 3, 'id': 'OG_149'}, 'turn': 19, 'player': 'opponent'}, {'card': {'name': 'Slam', 'mana': 2, 'id': 'EX1_391'}, 'turn': 19, 'player': 'opponent'}, {'card': {'name': 'Blood To Ichor', 'mana': 1, 'id': 'OG_314'}, 'turn': 19, 'player': 'opponent'}, {'card': {'name': "Disciple of C'Thun", 'mana': 3, 'id': 'OG_162'}, 'turn': 20, 'player': 'me'}, {'card': {'name': 'Fiery War Axe', 'mana': 2, 'id': 'CS2_106'}, 'turn': 20, 'player': 'opponent'}, {'card': {'name': 'Brann Bronzebeard', 'mana': 3, 'id': 'LOE_077'}, 'turn': 20, 'player': 'opponent'}, {'card': {'name': 'Fiery War Axe', 'mana': 2, 'id': 'CS2_106'}, 'turn': 21, 'player': 'me'}, {'card': {'name': 'Sylvanas Windrunner', 'mana': 6, 'id': 'EX1_016'}, 'turn': 21, 'player': 'me'}, {'card': {'name': 'Shield Slam', 'mana': 1, 'id': 'EX1_410'}, 'turn': 21, 'player': 'me'}, {'card': {'name': "C'Thun", 'mana': 10, 'id': 'OG_280'}, 'turn': 21, 'player': 'opponent'}, {'card': {'name': 'Slam', 'mana': 2, 'id': 'EX1_391'}, 'turn': 22, 'player': 'me'}, {'card': {'name': 'Execute', 'mana': 1, 'id': 'CS2_108'}, 'turn': 22, 'player': 'me'}, {'card': {'name': 'Shield Block', 'mana': 3, 'id': 'EX1_606'}, 'turn': 22, 'player': 'me'}, {'card': {'name': 'Brann Bronzebeard', 'mana': 3, 'id': 'LOE_077'}, 'turn': 22, 'player': 'me'}, {'card': {'name': 'Fiery War Axe', 'mana': 2, 'id': 'CS2_106'}, 'turn': 22, 'player': 'opponent'}, {'card': {'name': "C'Thun", 'mana': 10, 'id': 'OG_280'}, 'turn': 23, 'player': 'me'}, {'card': {'name': 'Brawl', 'mana': 5, 'id': 'EX1_407'}, 'turn': 23, 'player': 'opponent'}])
#+end_example


#+BEGIN_SRC ipython :session :results output
  ch = pd.Series(ch)
  print(ch)
#+END_SRC

#+RESULTS:
: 0    [{'card': {'name': 'Shield Block', 'mana': 3, ...
: 1    [{'card': {'name': 'C'Thun's Chosen', 'mana': ...
: dtype: object


#+BEGIN_SRC ipython :session :results output
  #print(ch)
  for game_history in ch:
      for turn in game_history:
          turn['card'] = turn['card']['name']
  print(ch)
#+END_SRC

#+RESULTS:
: 0    [{'card': 'Shield Block', 'turn': 3, 'player':...
: 1    [{'card': 'C'Thun's Chosen', 'turn': 4, 'playe...
: dtype: object


#+BEGIN_SRC ipython :session :results output
  print(nom.games[(nom.games['p_deck_type'] == "C'Thun_Warrior") & (nom.games['o_deck_type'] == "C'Thun_Warrior")])
#+END_SRC

#+RESULTS:
#+begin_example
                       added  \
25  2016-07-08T01:16:59.000Z   
51  2016-07-06T17:45:28.000Z   

                                         card_history   coin  duration  \
25  [{'turn': 3, 'card': {'mana': 3, 'name': 'Shie...   True       863   
51  [{'turn': 4, 'card': {'mana': 4, 'name': 'C'Th...  False      1087   

       hero hero_deck        id  legend    mode  note opponent opponent_deck  \
25  Warrior    C'Thun  34335967     NaN  ranked  None  Warrior        C'Thun   
51  Warrior    C'Thun  34194521     NaN  ranked  None  Warrior        C'Thun   

    rank result     p_deck_type     o_deck_type   win  count  
25  13.0    win  C'Thun_Warrior  C'Thun_Warrior  True      1  
51  14.0    win  C'Thun_Warrior  C'Thun_Warrior  True      1  
#+end_example




#+BEGIN_SRC ipython :session :results output
  p_df = []
  o_df = []
  for r in zip(decks['p_cards_played'], decks['o_cards_played'], decks['result']):
      for p_card in r[0]:
          p_df.append({'card': p_card, 'win': 1, 'loss': 0} if r[2] == 'win' else {'card': p_card, 'win': 0, 'loss': 1})
      for o_card in r[1]:
          o_df.append({'card': o_card, 'win': 1, 'loss': 0} if r[2] == 'loss' else {'card': o_card, 'win': 0, 'loss': 1})

  p_df = pd.DataFrame(p_df).groupby('card').agg(np.sum)
  o_df = pd.DataFrame(o_df).groupby('card').agg(np.sum)

  print(p_df)
  print(o_df)
#+END_SRC



#+BEGIN_SRC ipython :session
  import sys
  import json
  import requests
  import pandas as pd
  import numpy as np
  import os.path
  import seaborn as sns
  %matplotlib inline
  import matplotlib.pyplot as plt
  import pprint
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session
  import yaha_analyzer
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session
  USERNAME = "ancient-molten-giant-2943"
  API_KEY = "-X_VZRijrHoV4qMZxfXq"
  URL = "https://trackobot.com/profile/history.json?"

  HS_JSON = "https://api.hearthstonejson.com/v1/latest/enUS/"
  HS_JSON_EXT = ["cardbacks.json", "cards.collectible.json", "cards.json"]
#+END_SRC

#+RESULTS:


#+BEGIN_SRC ipython :session
  import yaha_analyzer
  nom = yaha_analyzer.yaha_analyzer()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :results output
  nom.grab_data(USERNAME, API_KEY)
  nom.generate_decks()
  matchups = nom.generate_matchups(game_mode = 'both', game_threshold=1) #groupby matchups
#+END_SRC

#+RESULTS:


#+BEGIN_SRC ipython :session
  print(nom.games.head())
  print(nom.games['p_cards_played'][0])
#+END_SRC

#+RESULTS:


#+BEGIN_SRC ipython :session
  cards = nom.generate_cards(nom.games[nom.games['mode'] == 'ranked'])
  print(cards[0].head())
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :results output
  print(nom.games.head())
#+END_SRC

#+RESULTS:
#+begin_example
                      added  \
0  2016-07-20T04:03:05.000Z   
1  2016-07-20T03:56:51.000Z   
2  2016-07-18T16:12:50.000Z   
3  2016-07-18T16:06:27.000Z   
4  2016-07-18T15:59:15.000Z   

                                        card_history   coin  duration  \
0  [{'turn': 1, 'card': {'mana': None, 'id': 'GAM...  False       360   
1  [{'turn': 2, 'card': {'mana': 2, 'id': 'CS2_10...  False       653   
2  [{'turn': 1, 'card': {'mana': 1, 'id': 'LOE_01...   True       363   
3  [{'turn': 2, 'card': {'mana': 2, 'id': 'CS2_01...  False       252   
4  [{'turn': 1, 'card': {'mana': 1, 'id': 'CS2_23...   True       623   

      hero hero_deck        id  legend    mode  note  ...    \
0  Warrior     Other  35348569     NaN  ranked  None  ...     
1  Warrior     Other  35348368     NaN  casual  None  ...     
2    Druid     Token  35210043     NaN  casual  None  ...     
3    Druid     Token  35209510     NaN  casual  None  ...     
4   Priest    Dragon  35208841     NaN  casual  None  ...     

                                      p_cards_played  \
0  [Armor Up!, Frothing Berserker, Whirlwind, Rav...   
1  [Armor Up!, Frothing Berserker, Acolyte of Pai...   
2  [The Coin, Wild Growth, Innervate, Druid of th...   
3  [Shapeshift, Shapeshift, Fandral Staghelm, Inn...   
4  [Northshire Cleric, Museum Curator, The Coin, ...   

                                      o_cards_played  day hour minute month  \
0  [The Coin, Dark Peddler, Dire Wolf Alpha, Mort...   20    4      3     7   
1  [Wild Pyromancer, Lava Shock, Injured Blademas...   20    3     56     7   
2  [Tunnel Trogg, Ancestral Knowledge, Argent Squ...   18   16     12     7   
3  [Totemic Call, The Coin, Flamewreathed Faceles...   18   16      6     7   
4  [Totem Golem, Rockbiter Weapon, Flamewreathed ...   18   15     59     7   

  second  year    win  count  
0      5  2016  False      1  
1     51  2016  False      1  
2     50  2016   True      1  
3     27  2016  False      1  
4     15  2016   True      1  

[5 rows x 26 columns]
#+end_example

#+BEGIN_SRC ipython :session :results output
  top = nom.games['added'].head()
  import datetime
  format_date = lambda x: datetime.datetime.strptime(x[:-5], '%Y-%m-%dT%H:%M:%S')
  t_map = top.map(format_date)
  split_date = lambda x: {'year': x.year, 'month': x.month, 'day': x.day, 'hour': x.hour, 'minute': x.minute, 'second': x.second}
  df = pd.DataFrame(list(map(lambda x: split_date(x), t_map)))
  nom.games = nom.games.join(df, how='outer')
  print(nom.games.head())
#+END_SRC

#+RESULTS:
#+begin_example
                      added  \
0  2016-07-20T04:03:05.000Z   
1  2016-07-20T03:56:51.000Z   
2  2016-07-18T16:12:50.000Z   
3  2016-07-18T16:06:27.000Z   
4  2016-07-18T15:59:15.000Z   

                                        card_history   coin  duration  \
0  [{'turn': 1, 'player': 'opponent', 'card': {'m...  False       360   
1  [{'turn': 2, 'player': 'me', 'card': {'mana': ...  False       653   
2  [{'turn': 1, 'player': 'opponent', 'card': {'m...   True       363   
3  [{'turn': 2, 'player': 'me', 'card': {'mana': ...  False       252   
4  [{'turn': 1, 'player': 'me', 'card': {'mana': ...   True       623   

      hero hero_deck        id  legend    mode  note   ...    \
0  Warrior     Other  35348569     NaN  ranked  None   ...     
1  Warrior     Other  35348368     NaN  casual  None   ...     
2    Druid     Token  35210043     NaN  casual  None   ...     
3    Druid     Token  35209510     NaN  casual  None   ...     
4   Priest    Dragon  35208841     NaN  casual  None   ...     

                                      p_cards_played  \
0  [Armor Up!, Frothing Berserker, Whirlwind, Rav...   
1  [Armor Up!, Frothing Berserker, Acolyte of Pai...   
2  [The Coin, Wild Growth, Innervate, Druid of th...   
3  [Shapeshift, Shapeshift, Fandral Staghelm, Inn...   
4  [Northshire Cleric, Museum Curator, The Coin, ...   

                                      o_cards_played    win count   day  hour  \
0  [The Coin, Dark Peddler, Dire Wolf Alpha, Mort...  False     1  20.0   4.0   
1  [Wild Pyromancer, Lava Shock, Injured Blademas...  False     1  20.0   3.0   
2  [Tunnel Trogg, Ancestral Knowledge, Argent Squ...   True     1  18.0  16.0   
3  [Totemic Call, The Coin, Flamewreathed Faceles...  False     1  18.0  16.0   
4  [Totem Golem, Rockbiter Weapon, Flamewreathed ...   True     1  18.0  15.0   

  minute month second    year  
0    3.0   7.0    5.0  2016.0  
1   56.0   7.0   51.0  2016.0  
2   12.0   7.0   50.0  2016.0  
3    6.0   7.0   27.0  2016.0  
4   59.0   7.0   15.0  2016.0  

[5 rows x 26 columns]
#+end_example

#+BEGIN_SRC ipython :session
  print(nom.games['p_deck_type'])
#+END_SRC

#+RESULTS:


#+BEGIN_SRC ipython :session :results output

  cards = []
  for r in zip(nom.games['p_cards_played'], nom.games['result'], nom.games['p_deck_type'], nom.games['o_deck_type']):
      for card in r[0]:
          data = {'card': card, 'p_deck_type': r[2], 'o_deck_type': r[3], 'win': 1, 'loss': 0} if r[1] == 'win' else {'card': card, 'p_deck_type': r[2], 'o_deck_type': r[3], 'win': 0, 'loss': 1}
          cards.append(data)
  cards = pd.DataFrame(cards)
  cards = cards.groupby(['card', 'p_deck_type', 'o_deck_type']).agg(np.sum)
  cards = cards[cards['win'] + cards['loss'] > 2]
  cards['win%'] = cards['win']/(cards['win'] + cards['loss'])
  print(cards.head(30))
#+END_SRC

#+RESULTS:
#+begin_example
                                                        loss  win      win%
card                   p_deck_type     o_deck_type                         
Acolyte of Pain        C'Thun_Warrior  Midrange_Hunter     1    3  0.750000
                                       Tempo_Mage          1    3  0.750000
                       Control_Warrior C'Thun_Warrior      2    2  0.500000
                                       Dragon_Warrior      0    4  1.000000
                                       Midrange_Hunter     6    2  0.250000
                                       Midrange_Shaman     2    3  0.600000
                                       N'Zoth_Paladin      3    1  0.250000
                                       Reno_Warlock        2    1  0.333333
                                       Tempo_Mage          1    5  0.833333
Alexstrasza's Champion Dragon_Warrior  Aggro_Shaman        0    3  1.000000
                                       Other_Rogue         0    4  1.000000
                                       Tempo_Mage          7    5  0.416667
                                       Tempo_Warrior       0    3  1.000000
                                       Zoo_Warlock         1    3  0.750000
Ancient Shieldbearer   C'Thun_Warrior  C'Thun_Warrior      0    4  1.000000
                                       Midrange_Hunter     1    3  0.750000
                                       Tempo_Mage          0    3  1.000000
Armor Up!              Control_Priest  Midrange_Hunter     0    4  1.000000
                       Control_Warrior C'Thun_Warrior      0    4  1.000000
                       Other_Warrior   Other_Shaman        3    0  0.000000
Azure Drake            Dragon_Warrior  Aggro_Shaman        0    3  1.000000
                                       Midrange_Shaman     3    0  0.000000
                                       Other_Rogue         0    4  1.000000
                                       Tempo_Mage          7    3  0.300000
                       Other_Warrior   Other_Shaman        2    1  0.333333
Bash                   Control_Warrior Aggro_Shaman        2    3  0.600000
                                       C'Thun_Warrior      4    4  0.500000
                                       Dragon_Warrior      0    6  1.000000
                                       Midrange_Hunter    11    2  0.153846
                                       Midrange_Shaman     0    5  1.000000
#+end_example

#+BEGIN_SRC ipython :session
  print(nom.generate_card_matchups().head())
#+END_SRC


